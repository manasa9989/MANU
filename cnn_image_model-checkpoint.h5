{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c67c98ec",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 8725 images belonging to 2 classes.\n",
      "Found 2180 images belonging to 2 classes.\n",
      "Epoch 1/5\n",
      "273/273 [==============================] - 377s 1s/step - loss: 0.6023 - accuracy: 0.6660 - val_loss: 0.6146 - val_accuracy: 0.6651\n",
      "Epoch 2/5\n",
      "273/273 [==============================] - 314s 1s/step - loss: 0.5003 - accuracy: 0.7491 - val_loss: 0.5778 - val_accuracy: 0.6858\n",
      "Epoch 3/5\n",
      "273/273 [==============================] - 322s 1s/step - loss: 0.4433 - accuracy: 0.7879 - val_loss: 0.5750 - val_accuracy: 0.7362\n",
      "Epoch 4/5\n",
      "273/273 [==============================] - 321s 1s/step - loss: 0.3860 - accuracy: 0.8198 - val_loss: 0.4801 - val_accuracy: 0.7720\n",
      "Epoch 5/5\n",
      "273/273 [==============================] - 322s 1s/step - loss: 0.3225 - accuracy: 0.8574 - val_loss: 0.4589 - val_accuracy: 0.7913\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sri\\anaconda3\\lib\\site-packages\\keras\\src\\engine\\training.py:3000: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
      "  saving_api.save_model(\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.keras import layers, models\n",
    "\n",
    "# Set dataset path\n",
    "train_dir = 'C:/data'  # Path to your dataset with 'real/' and 'fake/' subfolders\n",
    "\n",
    "# Create ImageDataGenerator instances\n",
    "train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)\n",
    "\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    train_dir,\n",
    "    target_size=(128, 128),  # Resize images to 128x128\n",
    "    batch_size=32,\n",
    "    class_mode='binary',  # Binary classification (real or fake)\n",
    "    subset='training'\n",
    ")\n",
    "\n",
    "validation_generator = train_datagen.flow_from_directory(\n",
    "    train_dir,\n",
    "    target_size=(128, 128),\n",
    "    batch_size=32,\n",
    "    class_mode='binary',\n",
    "    subset='validation'\n",
    ")\n",
    "\n",
    "# Build a custom CNN model\n",
    "model = models.Sequential([\n",
    "    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),\n",
    "    layers.MaxPooling2D((2, 2)),\n",
    "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
    "    layers.MaxPooling2D((2, 2)),\n",
    "    layers.Conv2D(128, (3, 3), activation='relu'),\n",
    "    layers.MaxPooling2D((2, 2)),\n",
    "    layers.Flatten(),\n",
    "    layers.Dense(128, activation='relu'),\n",
    "    layers.Dense(1, activation='sigmoid')  # Output layer for binary classification\n",
    "])\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "model.fit(train_generator, epochs=5, validation_data=validation_generator)\n",
    "\n",
    "# Save the model\n",
    "model.save('models/cnn_image_model.h5')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2df5947",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
